
==============================
‚úÖ MONGODB IN NODE.JS
==============================

üî∞ SETUP

const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost:27017/myapp');

const userSchema = new mongoose.Schema({
  name: String,
  age: Number,
  email: String,
  status: String,
  tags: [String],
  address: {
    city: String,
    country: String,
  },
});

const User = mongoose.model('User', userSchema);

‚úÖ CREATE

// Single document
await User.create({ name: 'Alice', age: 25, email: 'alice@example.com' });

// Multiple documents
await User.insertMany([
  { name: 'Bob', age: 30 },
  { name: 'Charlie', age: 22 },
]);

üîé READ (FIND)

// Find all
await User.find();

// Conditional find
await User.find({ age: { $gte: 18, $lte: 30 } });

// Find one
await User.findOne({ email: 'alice@example.com' });

// Find by ID
await User.findById('64d123abc456def7890abc12');

// Select specific fields
await User.find().select('name age');

// Sort
await User.find().sort({ age: -1 });

// Pagination
await User.find().skip(10).limit(5);

‚úèÔ∏è UPDATE

// Update one
await User.updateOne({ name: 'Alice' }, { $set: { age: 26 } });

// Update many
await User.updateMany({ status: 'inactive' }, { $set: { status: 'pending' } });

// Find and update
await User.findByIdAndUpdate(id, { age: 35 }, { new: true });

‚ùå DELETE

// Delete one
await User.deleteOne({ name: 'Charlie' });

// Delete many
await User.deleteMany({ status: 'inactive' });

// Find and delete
await User.findByIdAndDelete(id);

üîÑ SPECIAL OPERATORS

// $in
await User.find({ name: { $in: ['Alice', 'Bob'] } });

// $or
await User.find({ $or: [{ age: { $lt: 18 } }, { status: 'minor' }] });

// $regex
await User.find({ name: { $regex: /^A/i } });

// Exists
await User.find({ email: { $exists: true } });

// $all (match all array values)
await User.find({ tags: { $all: ['nodejs', 'mongodb'] } });

üß© ARRAY OPERATIONS

// Push value to array
await User.updateOne({ _id: id }, { $push: { tags: 'newTag' } });

// Pull value from array
await User.updateOne({ _id: id }, { $pull: { tags: 'oldTag' } });

// AddToSet (avoid duplicates)
await User.updateOne({ _id: id }, { $addToSet: { tags: 'uniqueTag' } });

üî¢ INCREMENT & MATH

// Increment age by 1
await User.updateOne({ _id: id }, { $inc: { age: 1 } });

üìä AGGREGATION (MODERN)

await User.aggregate([
  { $match: { status: 'active' } },
  { $group: { _id: '$address.country', total: { $sum: 1 } } },
  { $sort: { total: -1 } },
]);

// Count
await User.countDocuments({ status: 'active' });

üß† ADVANCED EXAMPLES

// Nested field match
await User.find({ 'address.city': 'Delhi' });

// Text search (requires text index)
await User.find({ $text: { $search: 'developer' } });

// Type check
await User.find({ age: { $type: 'number' } });
